using System.Diagnostics.CodeAnalysis;

namespace BotForge.Messaging;

/// <summary>
/// Represents an incoming update provided by a transport. An update may contain a message, an interaction,
/// or other platform events. Implementations expose lightweight members to allow handlers to inspect
/// the update without depending on transport-specific types.
/// </summary>
public interface IUpdate
{
    /// <summary>
    /// The timestamp when the update was generated by the transport.
    /// </summary>
    DateTimeOffset Timestamp { get; }

    /// <summary>
    /// The kind of update.
    /// </summary>
    UpdateType Type { get; }

    /// <summary>
    /// The identity of the sender (user) related to this update.
    /// </summary>
    UserIdentity Sender { get; }

    /// <summary>
    /// The message contained in the update, when <see cref="Type"/> indicates a message-related update; otherwise <see langword="null"/>.
    /// </summary>
    IMessage? Message { get; }

    /// <summary>
    /// The interaction contained in the update, when <see cref="Type"/> indicates an interaction; otherwise <see langword="null"/>.
    /// </summary>
    IInteraction? Interaction { get; }

    /// <summary>
    /// The transport-specific raw update object (for advanced scenarios or logging).
    /// </summary>
    object? RawUpdate { get; }

    /// <summary>
    /// True when the update represents a message event (created, edited, or deleted).
    /// When true, <see cref="Message"/> and <see cref="RawUpdate"/> are expected to be non-null.
    /// </summary>
    [MemberNotNullWhen(true, nameof(Message), nameof(RawUpdate))]
    bool IsMessage => Type is UpdateType.MessageCreated or UpdateType.MessageEdited or UpdateType.MessageDeleted;

    /// <summary>
    /// True when the update represents an interaction (command, button, callback, etc.).
    /// When true, <see cref="Interaction"/> and <see cref="RawUpdate"/> are expected to be non-null.
    /// </summary>
    [MemberNotNullWhen(true, nameof(Interaction), nameof(RawUpdate))]
    bool IsInteraction => Type is UpdateType.Command or UpdateType.Interaction or UpdateType.ButtonClicked or UpdateType.CallbackQuery;
}

/// <summary>
/// Enumerates the supported update kinds that transports may produce.
/// </summary>
public enum UpdateType
{
    /// <summary>Unknown or no-op update.</summary>
    None,

    /// <summary>A new message was created.</summary>
    MessageCreated,

    /// <summary>An existing message was edited.</summary>
    MessageEdited,

    /// <summary>A message was deleted.</summary>
    MessageDeleted,

    /// <summary>A command-style interaction was invoked.</summary>
    Command,

    /// <summary>A generic interaction event.</summary>
    Interaction,

    /// <summary>A button click event.</summary>
    ButtonClicked,

    /// <summary>A callback query event.</summary>
    CallbackQuery,

    /// <summary>A reaction (emoji, etc.) was added.</summary>
    ReactionAdded,

    /// <summary>A reaction was removed.</summary>
    ReactionRemoved,

    /// <summary>A member joined the chat.</summary>
    MemberJoined,

    /// <summary>A member left the chat.</summary>
    MemberLeft,

    /// <summary>A transport/system-level event.</summary>
    System,
}
